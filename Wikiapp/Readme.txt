1. განაცხადის მიზანი
WikiApp არის მობილური აპლიკაცია, რომელიც შექმნილია ვიკიპედიის კონტენტზე უწყვეტი წვდომის უზრუნველსაყოფად, გაუმჯობესებული ფუნქციებით ოფლაინ გამოყენებისთვის და მომხმარებლის მოხერხებულობისთვის. მისი ძირითადი მიზნებია:

ძიება და დათვალიერება: მიეცით საშუალება მომხმარებლებს მოძებნონ და წაიკითხონ ვიკიპედიის სტატიები პირდაპირ აპში.

ოფლაინ წვდომა: მიეცით საშუალება მომხმარებლებს შეინახონ სტატიები ოფლაინ სანახავად, რაც უზრუნველყოფს კონტენტის ხელმისაწვდომობას ინტერნეტის გარეშე.

ისტორიის მენეჯმენტი: ავტომატური თვალყური ადევნეთ და მართეთ დათვალიერების ისტორია ახლახან ნანახ სტატიებზე სწრაფი წვდომისთვის.

მომხმარებლის ავთენტიფიკაცია: დაიცავით მომხმარებლის ანგარიშები შესვლის/რეგისტრაციის მეშვეობით გამოცდილების პერსონალიზებისთვის (მაგ., შენახული სტატიების/ისტორიის სინქრონიზაცია მოწყობილობებზე).

2. როგორ გამოვიყენოთ აპლიკაცია
ძირითადი ფუნქციონალობა და სამუშაო პროცესი
სტატიების ძიება

შეეხეთ საძიებო ზოლს მთავარ ეკრანზე.

შეიყვანეთ თემა ან საკვანძო სიტყვა.

დაათვალიერეთ შედეგები და აირჩიეთ სტატია სანახავად.

წაიკითხეთ სტატიები

სტატიები იტვირთება WebView-ში სრული ფორმატირებით (ტექსტი, სურათები, ბმულები).

გამოიყენეთ ღილაკი Save for Offline (ზედა მარჯვნივ) სტატიის ლოკალურად შესანახად.

შენახული სტატიების მართვა

გადადით შენახული გვერდების ეკრანზე.

იხილეთ ყველა ხაზგარეშე შენახული სტატია.

შეეხეთ გასახსნელად ან გადაფურცლეთ წასაშლელად.

დათვალიერების ისტორიის ნახვა

შედით ისტორიის ეკრანზე ახლახან ნანახი სტატიების სანახავად.

ისტორიის გასუფთავება ღილაკის ისტორიის გასუფთავება.

მომხმარებლის ავთენტიფიკაცია

რეგისტრაცია/შესვლა: გამოიყენეთ ღილაკები შესვლა ან რეგისტრაცია ანგარიშის შესაქმნელად ან შესასვლელად (აუცილებელია მონაცემთა სინქრონიზაციისთვის).

გასვლა: დაბრუნდით შესვლის ეკრანზე გასვლის ღილაკის საშუალებით.

3. გამოყენებული ტექნოლოგიები და ხელსაწყოები
ძირითადი კომპონენტები
კატეგორიის ტექნოლოგიები მიზანი
UI Framework Jetpack შეადგინეთ თანამედროვე დეკლარაციული UI ინსტრუმენტარიუმის საპასუხო განლაგებების შესაქმნელად.
ნავიგაცია Jetpack Navigation შედგენა სახელურები ეკრანის გადასვლები (მაგ. მთავარი → სტატია → შენახული გვერდები).
Network Retrofit 2, OkHttp Wikipedia API მონაცემების მოძიება (ძიების შედეგები, სტატიის შინაარსი).
Local Storage Room Database, DataStore Preferences შეინახეთ შენახული სტატიები (Room) და მომხმარებლის პარამეტრები/ისტორია (DataStore).
Dependency Injection Hilt დამოკიდებულების მართვის გამარტივება ViewModels-ში, საცავებში და ა.შ.
State Management ViewModel, StateFlow UI მდგომარეობის მართვა (მაგ., ძიების შედეგები, ჩატვირთვის სტატუსი).
ვებ კონტენტი Android WebView ვიკიპედიის სტატიების რენდერი JavaScript/HTML მხარდაჭერით.
Authentication Firebase Authentication უსაფრთხო მომხმარებლის რეგისტრაცია/შესვლა.
HTML Parsing Jsoup სუფთა HTML ფრაგმენტები ძიების შედეგებისთვის.
Build Tools Gradle, Android Studio Project-ის კონფიგურაცია, დამოკიდებულების მართვა და გამართვა.
API და ბიბლიოთეკები
Wikipedia API: იღებს ძიების შედეგებს და სტატიის შინაარსს.

Firebase: Backend სერვისები მომხმარებლის ავთენტიფიკაციისთვის.

არქიტექტურა
MVVM (Model-View-ViewModel): გამოყოფს ბიზნეს ლოგიკას (ViewModel) UI-სგან (Compose).

Repository Pattern: ახდენს მონაცემთა ოპერაციების ცენტრალიზებას (ქსელი + მონაცემთა ბაზა).

დამატებითი შენიშვნები
Offline Saving: სტატიები ინახება როგორც გაწმენდილი HTML, რათა ამოიღონ არასასურველი სიმბოლოები ფორმატირების შენარჩუნებისას.

Error Handling: ქსელის შეცდომები და ცარიელი შინაარსის სცენარები აჩვენებს მომხმარებლისთვის მოსახერხებელი შეტყობინებებს.

Performance: იყენებს კორუტინებს ასინქრონული ოპერაციებისთვის, რათა თავიდან აიცილოს ინტერფეისის გაყინვა.